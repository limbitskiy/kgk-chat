import { ref } from 'vue'
import { API_WS_URL } from 'src/constants'
import { handleMessage } from './messageHandler'
import { handleStatus } from './statusHandler'

const socket = ref<WebSocket | null>(null)

const connect = (pubsub: string) => {
  if (socket.value || !pubsub) return

  socket.value = new WebSocket(`${API_WS_URL}/subscribe/${pubsub}`)

  socket.value.onopen = () => {
    console.log('‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω')
    handleStatus('open')
  }

  socket.value.onmessage = (event) => {
    const data = JSON.parse(event.data)
    console.log('üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', data)
    handleMessage(data)
  }

  socket.value.onclose = () => {
    console.log('‚ùå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω, –ø—ã—Ç–∞—é—Å—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è...')
    socket.value = null
    setTimeout(connect, 3000)
    handleStatus('closed')
  }

  socket.value.onerror = (error) => {
    console.error('‚ö†Ô∏è WebSocket –æ—à–∏–±–∫–∞:', error)
  }
}

const sendMessage = (message: object) => {
  if (socket.value?.readyState === WebSocket.OPEN) {
    socket.value.send(JSON.stringify(message))
  } else {
    console.warn('‚ö†Ô∏è WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
  }
}

export default { connect, sendMessage }
